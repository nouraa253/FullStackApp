---
- name: Deploy full-stack via kubectl (local)
  hosts: local
  gather_facts: false
  vars:
    k8s_dir: "../k8s"
    k8s_namespace: "{{ k8s_namespace | default('project5') }}"
    registry: "{{ registry | default('docker.io/yourname') }}"
    app_name: "{{ app_name | default('project5') }}"
    build_tag: "{{ build_tag | default('latest') }}"
    kubeconfig_path: "{{ kubeconfig_path | default(lookup('env','KUBECONFIG')) }}"
  tasks:
    - name: Show kubectl and kubeconfig info
      shell: |
        set -e
        kubectl version --client
        echo "KUBECONFIG=${KUBECONFIG:-{{ kubeconfig_path }}}"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: info_out
      changed_when: false

    - name: Ensure namespace exists
      shell: |
        set -e
        kubectl get ns "{{ k8s_namespace }}" || kubectl create ns "{{ k8s_namespace }}"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Apply core manifests (secrets, configmap, pvc, mysql)
      shell: |
        set -e
        kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/mysql-secret.yaml"
        kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/mysql-configmap.yaml"
        kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/mysql-pvc.yaml"
        kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/mysql-deployment.yaml"
        kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/mysql-service.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Apply backend/frontend services (NodePort)
      shell: |
        set -e
        kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/backend-service.yaml"
        kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/frontend-service.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Apply deployments first time if missing
      shell: |
        set -e
        if ! kubectl -n "{{ k8s_namespace }}" get deploy backend >/dev/null 2>&1; then
          kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/backend-deployment.yaml"
        fi
        if ! kubectl -n "{{ k8s_namespace }}" get deploy frontend >/dev/null 2>&1; then
          kubectl apply -n "{{ k8s_namespace }}" -f "{{ k8s_dir }}/frontend-deployment.yaml"
        fi
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Set images to current build tag
      shell: |
        set -e
        kubectl -n "{{ k8s_namespace }}" set image deployment/backend  backend="{{ registry }}/{{ app_name }}-backend:{{ build_tag }}" --record=true
        kubectl -n "{{ k8s_namespace }}" set image deployment/frontend frontend="{{ registry }}/{{ app_name }}-frontend:{{ build_tag }}" --record=true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Rollout status (backend)
      shell: kubectl -n "{{ k8s_namespace }}" rollout status deployment/backend --timeout=180s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Rollout status (frontend)
      shell: kubectl -n "{{ k8s_namespace }}" rollout status deployment/frontend --timeout=180s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
